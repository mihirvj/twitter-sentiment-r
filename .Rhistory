ls
ls | less
ls |
less
mydata=scan()
clear
window(clear)
wl=matrix(c(54,49,49,41,26,43,49,50,58,71), nrow=5, ncol=2)
wl
teams=c("KC","Minn","Chi","Cle", "Det")
cols=c("Wins","Losees")
dimnames(wl)=list(teams,cols)
wl
cols=c("Wins","Losses")
wl
dimnames(wl)=list(teams,cols)
wl
wc[1,2]
wl[2,1]
wl[1,1]
wl[0,1]
wl[1,0]
wl[1,0]
wl[,"losses"]
wl[,"Losses"]
wl[,"Wins"]
A=matrix(1:6, nrow=3, ncol=2)
A
seq(2:12,2)
seq(2,12,2)
B=matrix(seq(2,12,2), nrow=3, ncol=2)
B
2*A+3
A+B
A/B
rowSums(A)
colSums(B)
rowMeans(A)
apply(A,1,max)
A
apply(B,2,min)
B
apply(B,3,min)
names=c("Joe","Jill","Julie","Sam","Sue")
gender=c("M","F","F","M","F")
heights=c(70,67,63,67,66)
data=data.frame(names,gender,heights)
data
data$heights
data$gender
data$names
year=seq(1790,1950,10)
m.age=c(15.9,15.7,15.9,16.5,17.2,17.9,19.5,20.2,20.6,21.6)
m.age=c(15.9,15.7,15.9,16.5,17.2,17.9,19.5,20.2,20.6,21.6
22.9,23.8,24.9,26.1,27.1,29.5,30.4)
m.age=c(NA)
m.age=c(15.9,15.7,15.9,16.5,17.2,17.9,19.5,20.2,20.6,21.6,22.9,23.8,24.9,26.1,27.1,29.5,30.4)
plot(year,m.age)
plot(year,m.age,type="l")
plot(year,m.age,type="b")
plot(year,m.age,type="h")
plot(year,m.age,type="o")
plot(year,m.age,type="s")
plot(year,m.age,type="b",main="My graph",xlab="year",ylab="median age",xlim=c(1750,2000),ylim=c(10,40),lwd=3,lty=2,col=3)
install.packages("kernlab")
mode(iris,-5)
mode(iris[,-5])
modelSVM <- ksvm(x=as.matrix(iris[,-5]), y=iris[,5])
install.packages("/tmp/RtmpCWlYp2/downloaded_packages/kernlab_0.9-20.tar.gz", repos = NULL, type = "source")
install.packages("/tmp/RtmpCWlYp2/downloaded_packages/kernlab_0.9-20.tar.gz", repos = NULL, type = "source", lib="/usr/lib/R/library")
install.packages("/tmp/RtmpCWlYp2/downloaded_packages/kernlab_0.9-20.tar.gz", repos = NULL, type = "source", lib="/usr/lib/R/library")
library(kernlab)
data (iris)
head (iris)
names (iris)
modelSVM <- ksvm(x=iris[,-5], y=iris[,5])
help(ksvm)
modelSVM <- ksvm(x=as.matrix(iris[,-5]), y=iris[,5])
predictions <- predict(modelSVM,iris[,-5])
summary(predictions)
summary(iris[,5])
table (predictions,iris[,5])
error(modelSVM)
trainingData <- iris[1:100,]
testData <- iris[101:150,]
modelSVM <- ksvm(x=as.matrix(trainingData[,-5]), y=trainingData[,5])
predictions <- predict(modelSVM,testData[,-5])
table (predictions,testData[,5])
index <- sample(1:dim(newspam)[1])
newspamtrain <- newspam[index[1:floor(dim(newspam)[1]/2)], c(1:2,58) ]
newspamtest <- newspam[index[((ceiling(dim(newspam)[1]/2)) + 1):dim(newspam)[1]], c(1:2,58)]
source('~/csc591/R/exercises.R')
data (spirals)
sc <- specc(spirals, centers=2)
spiraldata <- data.frame(x=spirals[,1], y=spirals[,2], class=as.factor(sc))
plot(spiraldata[,1],spiraldata[,2])
dim(spiraldata)
ksvm(class~., spiraldata, kernel="vanilladot", cross=3)
ksvm(class~., spiraldata, kernel="rbfdot", cross=3)
ksvm(class~., spiraldata, cross=3)
x = rbind(matrix(rnorm(120),,2),
matrix(rnorm(60,mean=3),,2),
matrix(rnorm(60, mean=-3), , 2))
dim(x)
y = c(rep("1",60), rep("2",60))
cl = c (rep("purple",60), rep("red",60))
plot (x, col=cl, pch=19)
ksvm(x,y,kernel="vanilladot")
ksvm(x,y,kernel="vanilladot")
ksvm(x,y,kernel="vanilladot")
ksvm(x,y,kernel="rbfdot")
x = rbind(cbind(rnorm(30,mean=3),rnorm(30,mean=-3)),
cbind(rnorm(30,mean=-3),rnorm(30,mean=3)),
matrix(rnorm(60,mean=3),,2),
matrix(-rnorm(60, mean=3),,2))
dim(x)
y = as.factor(c(rep("1",60), rep("2",60)))
cl = c (rep("purple",60), rep("red",60))
plot (x, col=cl, pch=19)
m=c(12,123,34)
class(m)
m=c('str','str2')
class()
class(m)
ls()
t=table(c(12,13,14))
t
class(t)
ls()
rm(t)
install.packages("sna", lib="/usr/lib/R/library")
setwd("~/csc591/R/p3")
source("data_retrieval.R")
source("preprocessing.R")
source("feature_construction.R")
source("training.R")
tweets = retrieve.tweets(n=1000)
source("data_retrieval.R")
tweets = retrieve.tweets(n=1000)
tweets$text <- sapply(tweets$text,function(row) iconv(row, "latin1", "ASCII", sub=""))
vc_tweets = Corpus(VectorSource(as.character(tweets$text)))
vc_tweets = process.tweets(vc_tweets)
tweets.tdm <- create.tdm(vc_tweets, training = T)
tweets.tdm.t <- as.data.frame(t(tweets.tdm), stringsAsFactors = F)
dim(tweets.tdm.t)
tweets.tdm.t["Class"] <- "love"
tweets.tdm.t[tweets.tdm.t$hate > 0, "Class"] <- "hate"
tweets.trained <- trainModel(tweets.tdm.t)
predictions <- predict(tweets.trained, tweets.tdm.t[,-ncol(tweets.tdm.t)])
summary(predictions)
table(predictions,tweets.tdm.t[,ncol(tweets.tdm.t)])
testTweets <- retrieve.tweets(n=1000)
testTweets$text <- sapply(testTweets$text,function(row) iconv(row, "latin1", "ASCII", sub=""))
vc.testTweets = Corpus(VectorSource(as.character(testTweets$text)))
vc.testTweets = process.tweets(vc.testTweets)
testTweets.tdm <- create.tdm(vc.testTweets)
testTweets.tdm.t <- as.data.frame(t(testTweets.tdm), stringsAsFactors = F)
testTweets.tdm.t["Class"] <- "love"
testTweets.tdm.t[testTweets.tdm.t$hate > 0, "Class"] <- "hate"
dim(testTweets.tdm.t)
testPrediction <- predict(tweets.trained, testTweets.tdm.t[,-ncol(testTweets.tdm.t)])
rm(list=ls())
s <- seq(1:100)
length(s)
rm(s)
df = data.frame()
df[0]
rm(df)
data(iris)
iris
iris <- iris[160,]
iris
data(iri)
data(iris)
iris
iris <- iris[c(1:150,160),]
irus
iris
?findFreqTerms
rm(iris)
source("data_retrieval.R")
source("preprocessing.R")
source("feature_construction.R")
source("training.R")
tweets = retrieve.tweets(n=1000)
tweets$text <- sapply(tweets$text,function(row) iconv(row, "latin1", "ASCII", sub=""))
vc_tweets = Corpus(VectorSource(as.character(tweets$text)))
vc_tweets = process.tweets(vc_tweets)
tweets.tdm <- create.tdm(vc_tweets, training = T)
tweets.tdm.t <- as.data.frame(t(tweets.tdm), stringsAsFactors = F)
tweets.tdm.t["Class"] <- "love"
tweets.tdm.t[tweets.tdm.t$hate > 0, "Class"] <- "hate"
tweets.trained <- trainModel(tweets.tdm.t)
predictions <- predict(tweets.trained, tweets.tdm.t[,-ncol(tweets.tdm.t)])
summary(predictions)
table(predictions,tweets.tdm.t[,ncol(tweets.tdm.t)])
testTweets <- retrieve.tweets(n=1000)
testTweets$text <- sapply(testTweets$text,function(row) iconv(row, "latin1", "ASCII", sub=""))
vc.testTweets = Corpus(VectorSource(as.character(testTweets$text)))
vc.testTweets = process.tweets(vc.testTweets)
testTweets.tdm <- create.tdm(vc.testTweets)
dim(testTweets.tdm)
dim(tweets.tdm)
length(gl.reservoir)
create.tdm
create.tdm = function(vc_tweets, training = F) {
tdm <- TermDocumentMatrix(vc_tweets, control=list(minWordLength=1))
if(training) {
gl.reservoir <<- union(findFreqTerms(tdm, 5, 100), c('love','hate'))
reservoir <- gl.reservoir
}
else {
#reservoir <- intersect(gl.reservoir, findFreqTerms(tdm))
reservoir <- findFreqTerms(tdm)[1:length(gl.reservoir)]
if(!('love' %in% reservoir)) {
reservoir[1] <- 'love'
}
if(!('hate' %in% reservoir)) {
reservoir[2] <- 'hate'
}
}
reservoir <- union(reservoir, c('love','hate'))
tdm.matrix <- as.matrix(tdm)
tdm.df <- as.data.frame(tdm.matrix)
tdm.sub <- tdm.df[reservoir,] # select only the terms in the reservoir
return (tdm.sub)
#ggplot(tdm.sub, aes("127", "144")) +
#geom_text(label = rownames(tdm.sub),
#         position=position_jitter())
}
testTweets$text <- sapply(testTweets$text,function(row) iconv(row, "latin1", "ASCII", sub=""))
vc.testTweets = Corpus(VectorSource(as.character(testTweets$text)))
vc.testTweets = process.tweets(vc.testTweets)
testTweets.tdm <- create.tdm(vc.testTweets)
dim(testTweets.tdm)
testTweets.tdm.t <- as.data.frame(t(testTweets.tdm), stringsAsFactors = F)
testTweets.tdm.t["Class"] <- "love"
testTweets.tdm.t[testTweets.tdm.t$hate > 0, "Class"] <- "hate"
testPrediction <- predict(tweets.trained, testTweets.tdm.t[,-ncol(testTweets.tdm.t)])
table(predictions,testTweets.tdm.t[,ncol(testTweets.tdm.t)])
testTweets <- retrieve.tweets(n=1000)
testTweets$text <- sapply(testTweets$text,function(row) iconv(row, "latin1", "ASCII", sub=""))
vc.testTweets = Corpus(VectorSource(as.character(testTweets$text)))
vc.testTweets = process.tweets(vc.testTweets)
testTweets.tdm <- create.tdm(vc.testTweets)
#testTweets.tdm <- testTweets.tdm[1:ncol(tweets.tdm)]
testTweets.tdm.t <- as.data.frame(t(testTweets.tdm), stringsAsFactors = F)
testTweets.tdm.t["Class"] <- "love"
testTweets.tdm.t[testTweets.tdm.t$hate > 0, "Class"] <- "hate"
testPrediction <- predict(tweets.trained, testTweets.tdm.t[,-ncol(testTweets.tdm.t)])
table(predictions,testTweets.tdm.t[,ncol(testTweets.tdm.t)])
rm(list=ls())
